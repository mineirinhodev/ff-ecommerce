name: Terraform Deploy

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  bootstrap:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: infra/backend-bootstrap
    steps:
      - uses: actions/checkout@v3
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
      - name: Configurar credenciais da AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Instalar jq
        run: sudo apt-get update && sudo apt-get install -y jq
      - name: Limpar locks antigos do Terraform (DynamoDB)
        run: |
          set +e
          trap 'exit 0' EXIT
          LOCK_TABLE="terraform-lock" # ajuste se necessário
          MAX_AGE_MINUTES=30
          aws dynamodb scan --table-name "$LOCK_TABLE" --query "Items[*]" > locks.json 2>/dev/null || { echo "Falha ao escanear tabela ou tabela não existe. Ignorando limpeza de locks."; exit 0; }
          COUNT=$(jq length locks.json 2>/dev/null || echo 0)
          if [ "$COUNT" -eq 0 ]; then
            echo "Nenhum lock encontrado."
            exit 0
          fi
          for row in $(jq -c '.[]' locks.json); do
            LOCK_ID=$(echo $row | jq -r '.LockID.S')
            INFO=$(echo $row | jq -r '.Info.S // empty')
            if [ -z "$INFO" ]; then
              aws dynamodb delete-item --table-name "$LOCK_TABLE" --key "{\"LockID\": {\"S\": \"$LOCK_ID\"}}" 2>/dev/null || true
              echo "Lock $LOCK_ID removido (sem Info)"
              continue
            fi
            CREATED=$(echo "$INFO" | grep -oP 'Created: \K[0-9\- :]+' | head -1)
            if [ -n "$CREATED" ]; then
              CREATED_TS=$(date -d "$CREATED" +%s 2>/dev/null || date -j -f "%Y-%m-%d %H:%M:%S" "$CREATED" +%s 2>/dev/null)
              NOW=$(date +%s)
              AGE=$(( (NOW - CREATED_TS) / 60 ))
              if [ "$AGE" -gt $MAX_AGE_MINUTES ]; then
                aws dynamodb delete-item --table-name "$LOCK_TABLE" --key "{\"LockID\": {\"S\": \"$LOCK_ID\"}}" 2>/dev/null || true
                echo "Lock $LOCK_ID removido (idade: $AGE min)"
              fi
            fi
          done
        shell: bash
      - name: Terraform Init
        run: terraform init
      - name: Terraform Apply
        run: terraform apply -auto-approve

  terraform:
    needs: bootstrap
    runs-on: ubuntu-latest
    strategy:
      matrix:
        module:
          - vpc
          - security
          - iam
          - ecr
          - ecs
          - api-gateway
          # NÃO incluir: router53-acm, api-gateway-domain
    defaults:
      run:
        working-directory: infra/${{ matrix.module }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
      - name: Configurar credenciais da AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Instalar jq
        run: sudo apt-get update && sudo apt-get install -y jq
      - name: Limpar locks antigos do Terraform (DynamoDB)
        run: |
          set +e
          trap 'exit 0' EXIT
          LOCK_TABLE="terraform-lock" # ajuste se necessário
          MAX_AGE_MINUTES=30
          aws dynamodb scan --table-name "$LOCK_TABLE" --query "Items[*]" > locks.json 2>/dev/null || { echo "Falha ao escanear tabela ou tabela não existe. Ignorando limpeza de locks."; exit 0; }
          COUNT=$(jq length locks.json 2>/dev/null || echo 0)
          if [ "$COUNT" -eq 0 ]; then
            echo "Nenhum lock encontrado."
            exit 0
          fi
          for row in $(jq -c '.[]' locks.json); do
            LOCK_ID=$(echo $row | jq -r '.LockID.S')
            INFO=$(echo $row | jq -r '.Info.S // empty')
            if [ -z "$INFO" ]; then
              aws dynamodb delete-item --table-name "$LOCK_TABLE" --key "{\"LockID\": {\"S\": \"$LOCK_ID\"}}" 2>/dev/null || true
              echo "Lock $LOCK_ID removido (sem Info)"
              continue
            fi
            CREATED=$(echo "$INFO" | grep -oP 'Created: \K[0-9\- :]+' | head -1)
            if [ -n "$CREATED" ]; then
              CREATED_TS=$(date -d "$CREATED" +%s 2>/dev/null || date -j -f "%Y-%m-%d %H:%M:%S" "$CREATED" +%s 2>/dev/null)
              NOW=$(date +%s)
              AGE=$(( (NOW - CREATED_TS) / 60 ))
              if [ "$AGE" -gt $MAX_AGE_MINUTES ]; then
                aws dynamodb delete-item --table-name "$LOCK_TABLE" --key "{\"LockID\": {\"S\": \"$LOCK_ID\"}}" 2>/dev/null || true
                echo "Lock $LOCK_ID removido (idade: $AGE min)"
              fi
            fi
          done
        shell: bash
      - name: Terraform Init
        run: terraform init
      - name: Terraform Plan
        run: terraform plan
      - name: Terraform Apply
        run: terraform apply -auto-approve
      - name: Aviso sobre módulos não aplicados
        if: ${{ matrix.module == 'api-gateway' }}
        run: echo 'Os módulos router53-acm e api-gateway-domain NÃO são aplicados automaticamente por este workflow.' 